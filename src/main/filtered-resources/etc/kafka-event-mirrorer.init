#!/bin/sh -
#
# chkconfig:   345 99 01
# description: Starts and stops the Kafka Event Mirrorer
# processname: java
#
### BEGIN INIT INFO
# Provides:	  kafka-event-mirrorer
# Required-Start:    $network $remote_fs
# Required-Stop:     $network $remote_fs
# Should-Start:      $local_fs
# Should-Stop:       $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Kafka Event Mirrorer
# Description:       OpenNMS Kafka Event Mirrorer
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
NAME="kafka-event-mirrorer"
DESC="Kafka Event Mirrorer"
APP_PREFIX="@INSTPREFIX@"
SYSCONFDIR="@SYSCONFDIR@"

RUNAS="root"
PIDFILE="@PIDFILE@"

if [ -f /lib/lsb/init-functions ]; then
	# shellcheck disable=SC1090,SC1091
	. /lib/lsb/init-functions
fi

if [ -f /etc/rc.d/init.d/functions ]; then
	# shellcheck disable=SC1090,SC1091
	. /etc/rc.d/init.d/functions
fi

if [ -z "$JAVA_HOME" ]; then
	JAVA_HOME="$("${APP_PREFIX}/bin/find-java.sh" 1.8.0 1.8.9999)"
fi

if [ -r "${SYSCONFDIR}/${NAME}" ]; then
	# shellcheck disable=SC1090,SC1091
	. "${SYSCONFDIR}/${NAME}"
fi

if [ ! -r "${CONFFILE}" ] && [ -r "${APP_PREFIX}/etc/config.yaml" ]; then
	CONFFILE="${APP_PREFIX}/etc/config.yaml"
fi

if [ ! -r "${CONFFILE}" ] && [ -r "/etc/${NAME}.yaml" ]; then
	CONFFILE="/etc/${NAME}.yaml"
fi

if [ ! -r "${CONFFILE}" ]; then
	user_homedir="$(getent passwd "${RUNAS}" | cut -d: -f6)"
	if [ -r "${user_homedir}/.kem/config.yaml" ]; then
		CONFFILE="${user_homedir}/.kem/config.yaml"
	fi
fi

# always dump heap if we OOM
DEFAULT_JAVA_OPTS="-XX:+HeapDumpOnOutOfMemoryError"

# combine user JAVA_OPTS with our defaults
JAVA_OPTS="${DEFAULT_JAVA_OPTS} ${JAVA_OPTS}"

# export any default configurable variables from sysconf
export JAVA_HOME JAVA_OPTS LD_LIBRARY_PATH

run_as() {
	if [ "$(id -n -u)" "!=" "${RUNAS}" ]; then
		DAEMON="$(daemon --user="${RUNAS}" true >/dev/null 2>&1 && command -v daemon)"
		START_STOP_DAEMON="$(command -v start-stop-daemon)"
		RUNUSER="$(runuser -u "${RUNAS}" true 2>/dev/null && command -v runuser)"
		if [ -n "${START_STOP_DAEMON}" ]; then
				"${START_STOP_DAEMON}" --pidfile="${PIDFILE}" --background --make-pidfile --user "${RUNAS}" "$@"
		elif [ -n "${DAEMON}" ]; then
			"${DAEMON}" --user="${RUNAS}" "$@" &
			echo "$!" > "${PIDFILE}"
		elif [ -n "${RUNUSER}" ] && [ -x "${RUNUSER}" ]; then
			"${RUNUSER}" -u "${RUNAS}" "$@" &
			echo "$!" > "${PIDFILE}"
		else
			/usr/bin/sudo -u "${RUNAS}" "$@" &
			echo "$!" > "${PIDFILE}"
		fi
	else
		exec "$@"
	fi
}

get_pid() {
	MY_PID=0
	if [ -f "${PIDFILE}" ]; then
		MY_PID="$(cat "${PIDFILE}")"
	fi
	echo "$MY_PID"
}

is_running() {
	PID=$(get_pid)
	if [ "${PID}" -ne "0" ] && ps p "$PID" > /dev/null; then
		return 0
	fi
	return 1
}

kill_process() {
	SIGNAL="$1"
	if [ -z "$SIGNAL" ]; then
		SIGNAL="-15"
	fi
	PID=$(get_pid)
	if [ "$PID" -gt 0 ]; then
		kill $SIGNAL "$PID"
	fi
}

COMMAND="$1"; shift

case "$COMMAND" in

	start)
		if is_running; then
			echo "$DESC is running."
			exit 0
		fi

		if [ ! -r "$CONFFILE" ]; then
			echo "$DESC: no configuration found."
			exit 6 # 6 = LSB "not configured"
		fi
		run_as "${JAVA_HOME}/bin/java" -jar "${APP_PREFIX}/lib/kafka-event-mirrorer.jar" mirror -c "$CONFFILE"
		;;

	stop)
		if is_running; then
			printf "Stopping %s: " "$DESC"
			STOP_ATTEMPTS=0
			while [ "$STOP_ATTEMPTS" -lt "$STOP_RETRIES" ]; do
				kill_process
				if is_running; then
					STOP_ATTEMPTS="$((STOP_ATTEMPTS + 1))"
					sleep "$STOP_WAIT"
				else
					echo "OK"
					exit 0
				fi
			done
			echo "FAILED"

			printf "Force-killing %s: " "$DESC"
			kill_process -9
			if is_running; then
				echo "FAILED"
				exit 1
			fi
			echo "OK"
			exit 0
		else
			echo "$DESC is not running."
			exit 0 # LSB specifies calling "stop" on a stopped service is still a success
		fi
		;;

	restart)
		$0 stop >/dev/null 2>&1
		sleep 2
		$0 start
		exit $?
		;;

	try-restart)
		if is_running; then
			echo "$DESC is not running."
			exit 0
		else
			$0 restart
			exit $?
		fi
		;;


	force-reload)
		$0 try-restart
		exit $?
		;;

	status)
		RETVAL=0
		if is_container; then
			run_as "${APP_PREFIX}"/bin/status >/dev/null
			RETVAL="$?"
		else
			RETVAL=is_running
		fi
		if [ $RETVAL -eq 0 ]; then
			echo "$DESC is running."
			exit 0
		else
			echo "$DESC is stopped."
			exit 3
		fi
		;;

	*)
		echo "Usage: $0 {start|stop|restart|try-restart|force-reload|status}" >&2
		exit 1
		;;
esac
